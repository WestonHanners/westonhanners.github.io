<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://alloc-init.com/test/feed.xml" rel="self" type="application/atom+xml" /><link href="http://alloc-init.com/test/" rel="alternate" type="text/html" /><updated>2019-08-12T21:14:10-04:00</updated><id>http://alloc-init.com/test/feed.xml</id><title type="html">alloc-init</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Scroll to top in iOS 13 UI Testing</title><link href="http://alloc-init.com/test/blog/2019.08.08" rel="alternate" type="text/html" title="Scroll to top in iOS 13 UI Testing" /><published>2019-08-08T00:00:00-04:00</published><updated>2019-08-08T00:00:00-04:00</updated><id>http://alloc-init.com/test/blog/scroll-to-top-ios13</id><content type="html" xml:base="http://alloc-init.com/test/blog/2019.08.08">&lt;p&gt;In XCTestCase if you want to scroll to the top of a scrollable view, you 
tap on the status bar&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XCUIApplication().statusBars.firstMatch.tap()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this is doesn’t work in iOS 13.&lt;/p&gt;

&lt;p&gt;I filed a radar during the beta and they just got back to me with this.&lt;/p&gt;

&lt;p&gt;The status bar is no longer part of the application, it’s part of the system 
UI (“springboard”). Change your test as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let systemApp = XCUIApplication(bundleIdentifier: &quot;com.apple.springboard&quot;)
systemApp.statusBars.firstMatch.tap()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This seems like it should be important, but it was not documented anywhere on
Apple’s website.&lt;/p&gt;

&lt;p&gt;If still need to support Xcode 10 / iOS 12, I recommend using the 
following extension&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension XCUIElement {
    func scrollToTop() {
        if #available(iOS 13, *) {
            let systemApp = XCUIApplication(bundleIdentifier: &quot;com.apple.springboard&quot;)
            systemApp.statusBars.firstMatch.tap()
        } else {
            XCUIApplication().statusBars.firstMatch.tap()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I figured I would share this so that it is at least documented somewhere.&lt;/p&gt;</content><author><name></name></author><summary type="html">In XCTestCase if you want to scroll to the top of a scrollable view, you tap on the status bar</summary></entry><entry><title type="html">Tips for Great Conference Calls</title><link href="http://alloc-init.com/test/blog/2019.07.21" rel="alternate" type="text/html" title="Tips for Great Conference Calls" /><published>2019-07-21T00:00:00-04:00</published><updated>2019-07-21T00:00:00-04:00</updated><id>http://alloc-init.com/test/blog/great-conference-calls</id><content type="html" xml:base="http://alloc-init.com/test/blog/2019.07.21">&lt;p&gt;Working in software development, is it guaranteed that you will attend a conference call at some point. I hate to use the cliché, but it’s 2019 and some people are still terrible at this. You will hear noises in the background, people won’t pay attention or will talk over each other and you have technical blunders.&lt;/p&gt;

&lt;p&gt;So I decided to put together a list of tips for improving your conference call experience.&lt;/p&gt;

&lt;h2 id=&quot;find-a-good-meeting-space&quot;&gt;Find a good meeting space&lt;/h2&gt;
&lt;p&gt;This one sounds obvious, but try to make every effort to obtain a quiet space to have your meeting. Conference rooms are the best choice, but barring that, any quiet space will do.&lt;/p&gt;

&lt;p&gt;Also be aware that while it may be quiet for you, you will be potentially making the space less quiet for other people. Avoid taking calls at your desk if you are in an open office.&lt;/p&gt;

&lt;p&gt;If it is nice outside and you are the only caller from your end, it can sometimes be nice to go for a walk. I have taken calls on city walking trails and parking garages before. This might not be ideal for every call, but it’s a good option to have.&lt;/p&gt;

&lt;h2 id=&quot;join-on-time&quot;&gt;Join on time&lt;/h2&gt;
&lt;p&gt;When you schedule a meeting, you are making a promise to your attendees, you are taking up peoples time. if you fail to join people who could otherwise be doing useful work are instead waiting in dead silence for the call to begin.&lt;/p&gt;

&lt;p&gt;Don’t be late.&lt;/p&gt;

&lt;p&gt;If you absolutely must be late, make sure you send out a notification as early as possible to let them know of your delay or, even better, update the calendar invite with a new start time.&lt;/p&gt;

&lt;h2 id=&quot;sound&quot;&gt;Sound&lt;/h2&gt;
&lt;p&gt;If you are taking the call alone, use headphones with a microphone. These typically sound better because the microphone is close to your mouth, but be mindful you don’t move around much if it is laying against your shirt. Avoid Bluetooth headphones unless you know they are of a high quality so you don’t sound robotic.&lt;/p&gt;

&lt;p&gt;Mute yourself when you are not speaking. Learn how to mute your call in the software you use and make liberal use of that button.&lt;/p&gt;

&lt;p&gt;If you are taking a call with multiple people, avoid using Laptop microphones. Also, be aware they can pick up the sound of every keystroke if you are typing while talking. We have a couple &lt;a href=&quot;https://www.jabra.com/Business/speakerphones/jabra-speak-series/jabra-speak-510&quot;&gt;Jabra Speak 510’s&lt;/a&gt; in our office, and they work great.&lt;/p&gt;

&lt;p&gt;Make sure you silence your phone and laptop.&lt;/p&gt;

&lt;p&gt;I like to do a quick audio and camera check before I join a call, most conferencing software will have a screen for this in their settings. Check your Mic and Camera to make sure the correct devices are selected.&lt;/p&gt;

&lt;h2 id=&quot;pay-attention&quot;&gt;Pay Attention&lt;/h2&gt;
&lt;p&gt;If you aren’t presenting or on camera, it can be easy to pull out your phone and browse Reddit or stare blankly out a window, but try to pay attention having to ask “wait, what did you say again” can be embarrassing.&lt;/p&gt;

&lt;p&gt;Put your devices in Do Not Disturb mode so you don’t get sidetracked by text messages or other notifications. iOS has a great feature where your phone will remain silenced until the end of your current calendar item.&lt;/p&gt;

&lt;p&gt;For meeting hosts, try to stay on topic and keep people involved in the conversation, this will prevent wandering minds.&lt;/p&gt;

&lt;p&gt;If you find a meeting has become sidetracked and the main topic is complete, please don’t hesitate to let people uninvolved in the side topic know they are free drop off.&lt;/p&gt;

&lt;h2 id=&quot;keep-your-desktop-clean&quot;&gt;Keep your desktop clean&lt;/h2&gt;
&lt;p&gt;If you are going to be sharing your screen, make sure your desktop is not cluttered. Take special care to remove documents with confidential or private information. Remove that funny meme your friend sent you. Just make sure your desktop has nothing that will embarrass you or your company. To make it easier, you can just make a folder called “clutter” and move everything in there.&lt;/p&gt;

&lt;p&gt;I’ve already mentioned Do Not Disturb mode several times in this post, but if you are screen sharing and you get an inappropriate text message from a friend, you will regret not silencing your notifications.&lt;/p&gt;

&lt;h2 id=&quot;do-a-camera-check-before-joining-video-calls&quot;&gt;Do a camera check before joining video calls&lt;/h2&gt;
&lt;p&gt;Before you join the meeting fire up your camera and take a look at your background.&lt;/p&gt;

&lt;p&gt;Check for clutter. Dirty laundry, trash, alcohol bottles… I have seen all of this, and it’s just unprofessional.&lt;/p&gt;

&lt;p&gt;Make sure you don’t have proprietary information up on a whiteboard. If you do client work, this is especially important as it can have legal ramifications.&lt;/p&gt;

&lt;p&gt;Check yourself. Look in the mirror, make sure you are as presentable as you would be in person.&lt;/p&gt;

&lt;h2 id=&quot;open-questions&quot;&gt;Open Questions&lt;/h2&gt;
&lt;p&gt;Try to avoid asking undirected questions, try to keep them directed at individuals.
Asking questions like these will cause one of three things to happen.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Multiple people answer at the same time and they talk over each other&lt;/li&gt;
  &lt;li&gt;No one talks and you get dead air and have to direct your question at a specific person anyways.&lt;/li&gt;
  &lt;li&gt;What you want to happen, happens and the correct person and only that person answers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You get a 1/3 chance for it to work, It’s awkward and you should just avoid it if possible.&lt;/p&gt;

&lt;p&gt;If you are running a standup meeting, you get to pick who talks first, don’t open it up to the floor.&lt;/p&gt;

&lt;h2 id=&quot;in-summary&quot;&gt;In Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Find a quiet place that won’t bother other people.&lt;/li&gt;
  &lt;li&gt;Be punctual or notify everyone you will be late as soon as possible.&lt;/li&gt;
  &lt;li&gt;Take measures to prevent interrupting sounds.&lt;/li&gt;
  &lt;li&gt;Pay attention so people don’t have to repeat themselves.&lt;/li&gt;
  &lt;li&gt;Check your desktop before enabling screen sharing.&lt;/li&gt;
  &lt;li&gt;Check your environment before joining a video call.&lt;/li&gt;
  &lt;li&gt;Avoid undirected questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you found this useful and if you didn’t, great job, you were probably already doing the right thing.&lt;/p&gt;

&lt;p&gt;Please share this and perhaps we can make conference calling better for everyone.&lt;/p&gt;</content><author><name></name></author><summary type="html">Working in software development, is it guaranteed that you will attend a conference call at some point. I hate to use the cliché, but it’s 2019 and some people are still terrible at this. You will hear noises in the background, people won’t pay attention or will talk over each other and you have technical blunders.</summary></entry><entry><title type="html">A Framework Author’s Case Against Frameworks</title><link href="http://alloc-init.com/test/blog/2017.12.21" rel="alternate" type="text/html" title="A Framework Author's Case Against Frameworks" /><published>2017-12-21T00:00:00-05:00</published><updated>2017-12-21T00:00:00-05:00</updated><id>http://alloc-init.com/test/blog/framework-authors-case</id><content type="html" xml:base="http://alloc-init.com/test/blog/2017.12.21">&lt;p&gt;I was looking at my YouTube subscription feed this morning, and this gem popped
up. While I don’t agree with his prejudice against native apps, I think Adrian 
adds a few more points to go well with &lt;a href=&quot;blog/2017.12.18&quot;&gt;yesterday’s blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VvOsegaN9Wk&quot;&gt;&lt;img src=&quot;images/framework-video.jpg&quot; alt=&quot;2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I was looking at my YouTube subscription feed this morning, and this gem popped up. While I don’t agree with his prejudice against native apps, I think Adrian adds a few more points to go well with yesterday’s blog post.</summary></entry><entry><title type="html">The Trap of Libraries</title><link href="http://alloc-init.com/test/blog/2017.12.17" rel="alternate" type="text/html" title="The Trap of Libraries" /><published>2017-12-17T00:00:00-05:00</published><updated>2017-12-17T00:00:00-05:00</updated><id>http://alloc-init.com/test/blog/the-trap-of-libraries</id><content type="html" xml:base="http://alloc-init.com/test/blog/2017.12.17">&lt;p&gt;One of the worst feelings I can ever have in iOS Software Engineering is cloning
an existing project for the first time and looking at the Podfile. I feel it gives
me a good sense of how the project is going to go. If there are only 1 or 2 pods,
I sigh a breath of relief, if there are more, I start the mourning process.&lt;/p&gt;

&lt;p&gt;It’s not like having a handful of pods are always a bad thing, but most of the time
they definitely are.&lt;/p&gt;

&lt;p&gt;Here is a short list of things that I don’t mind seeing in a Podfile.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HockeyApp&lt;/li&gt;
  &lt;li&gt;Fabric&lt;/li&gt;
  &lt;li&gt;Google Analytics&lt;/li&gt;
  &lt;li&gt;Urban Airship&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Libraries like these are helpful, they integrate backend services that might be
overwhelming to create from scratch, and allow you to focus more on your app.
While they tend to be a little larger than one would like, the companies that maintain
them tend to spend time making sure they are low impact, relatively bug-free, and
fairly easy to keep updated.&lt;/p&gt;

&lt;p&gt;Here is a list of libraries that send a chill down my spine.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ReactiveCocoa&lt;/li&gt;
  &lt;li&gt;Mantle&lt;/li&gt;
  &lt;li&gt;AFNetworking&lt;/li&gt;
  &lt;li&gt;Facebook Pop&lt;/li&gt;
  &lt;li&gt;ZXingObjC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more I could list here, but let’s get to the point. These libraries
are a loan from the bank of tech debt. Using some of these commits large portions
of your code to require constant maintenance, and you can only avoid it for so long.&lt;/p&gt;

&lt;h2 id=&quot;the-first-problem&quot;&gt;The First Problem&lt;/h2&gt;

&lt;p&gt;When I tell people my thoughts on these libraries, they always tell me…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;They are open source, if there is something you don’t like you can always just fix it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the maintainer goes away or stops supporting it, you can take it up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s run a little thought experiment on this, shall we?&lt;/p&gt;

&lt;p&gt;Take AFNetworking for example…&lt;/p&gt;

&lt;p&gt;If I am building a library that uses Apple’s URLSession to build my network stack,
I can be fairly confident that it will be maintained as long as the platform is.
It has a lot of features, is relatively bug-free, and I don’t have to pour over its
source-code with every update to make sure it is following the new best practices.&lt;/p&gt;

&lt;p&gt;However, if I use AFNetworking, I potentially have to wait weeks before
new language, security, and platform features are integrated. I am not sure if
you remember the &lt;a href=&quot;https://gist.github.com/AlamofireSoftwareFoundation/f784f18f949b95ab733a&quot;&gt;certificate pinning issue&lt;/a&gt;, but the gist of it is that the
maintainers identified a security issue introduced in one of their patches and,
to their credit, they patched it in about a week. The problem arose in that every
developer who used the library didn’t follow the news, or had to wait for internal
company processes to allow a release, then wait for Apple’s (at the time), slow,
app review to patch this vulnerability. The effect of this was that over 1000 apps
on the app store had this issue.&lt;/p&gt;

&lt;p&gt;Now this is a big, frequently used library and the maintainers did the best they
could to fix the problem as quickly and as loudly as they could, but can you say
that you follow the git issues and blogs related to every single library you use?
A small “syntactic sugar” library could easily introduce security issues without
your knowing, and if it’s not used by A LOT of people, it will fly completely under
your radar (I will avoid the obvious pun here).&lt;/p&gt;

&lt;p&gt;And what if this library wasn’t even well maintained?&lt;/p&gt;

&lt;p&gt;Yes, you could fork the library and start maintaining it yourself, but do you think
your clients and managers will agree that spending several hours a week maintaining a
library is a good thing? How would they feel if you are only using a couple functions?
If they are ok with it, you probably have a great job with very understanding
colleagues and you are probably on retainer, or work in a big corporation.
Consulting/Agency work doesn’t usually afford this luxury.&lt;/p&gt;

&lt;p&gt;Even if you only use popular, well-maintained libraries, you can still be hit by…&lt;/p&gt;

&lt;h2 id=&quot;the-second-problem&quot;&gt;The Second Problem&lt;/h2&gt;

&lt;p&gt;In the beginning of this article, I talked about the dread I feel opening up an
existing project’s Podfile for the first time, the worst thing you can see is at
the top.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;platform :ios, '6.0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means one or two of the following.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This project hasn’t been updated in a LONG time.&lt;/li&gt;
  &lt;li&gt;This project relies on a library that no longer exists.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the issue is the former, you will probably have well over 100 random deprecated
API warnings, and if you are lucky, only a couple hard errors. If it is the latter,
get prepared to spend a lot of time extracting that pod from the application.&lt;/p&gt;

&lt;p&gt;For example, I am looking forward to having to spend quite a few hours extracting
Mantle from an application because the app heavily relies on a feature no longer
present. This is not even close to the first time I have had to deal with this.
Smaller libraries are a bit more loose with redefining their entire API in an
update, completely breaking the hosting app, and sometimes introducing new bugs
that can take weeks of updating to work out.&lt;/p&gt;

&lt;p&gt;It can also be easy for someone working on the project to work around issues and
never actually update the library. When it finally comes time that you do run
&lt;code class=&quot;highlighter-rouge&quot;&gt;pod update&lt;/code&gt;, you might find that you now have a week or more of fixes to get
the new library running. Maybe you are the good guy (or gal) who spends time
keeping pods updated and therefore you don’t have to waste weeks doing the epic
rewrite, if you are this person, would you like a &lt;a href=&quot;https://ymedialabs.com/careers/&quot;&gt;job&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Libraries can be useful when a task is too complicated or requires large amounts
of infrastructure, but what I see a lot of the time are tiny, single-purpose,
libraries that only marginally improve the workflow.&lt;/p&gt;

&lt;p&gt;This sort of library can also dictate your entire architecture. They can lock you
into something that might be trendy now, but in a year or two, you find yourself
scratching your head and wondering how you ever got into this mess in the first
place.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;If you are using a smaller library, why not write it yourself? Autolayout DSL’s,
JSON parsers, custom animations; these aren’t generally very complicated to do
on your own and since you wrote it, you should be able to easily fix it when
needed. It will reduce app bloat, improve security, and you will get better at
the problems these libraries solve.&lt;/p&gt;

&lt;p&gt;Reducing boilerplate and simplifying common programming tasks are the siren
songs of software engineering, they can be quite attractive, and it is easy
to add them to your project. In reality, for larger projects, they are traps
that lock you into spending quite a lot of your time putting out the fires
they can create.&lt;/p&gt;

&lt;p&gt;If you want my opinion, they are best avoided when possible.&lt;/p&gt;

&lt;h2 id=&quot;afterthoughts&quot;&gt;Afterthoughts&lt;/h2&gt;

&lt;p&gt;It was not my intent to spend so much time picking on AFNetworking, it
just provided a good example for issues I will encounter. AFNetworking was
incredibly useful back before NSURLSession was a thin, but it is so easy to
do it right with just foundation libraries these days, I wonder why it is
still so popular for simple networking tasks. If you know why, please
&lt;a href=&quot;https://twitter.com/WestonHanners&quot;&gt;tweet at me&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">One of the worst feelings I can ever have in iOS Software Engineering is cloning an existing project for the first time and looking at the Podfile. I feel it gives me a good sense of how the project is going to go. If there are only 1 or 2 pods, I sigh a breath of relief, if there are more, I start the mourning process.</summary></entry><entry><title type="html">Auto-Completion And Organization for NotificationCenter</title><link href="http://alloc-init.com/test/blog/2017.01.23" rel="alternate" type="text/html" title="Auto-Completion And Organization for NotificationCenter" /><published>2017-01-23T00:00:00-05:00</published><updated>2017-01-23T00:00:00-05:00</updated><id>http://alloc-init.com/test/blog/notification-center-autocomplete</id><content type="html" xml:base="http://alloc-init.com/test/blog/2017.01.23">&lt;p&gt;I may be late to the party, but I just discovered the most amazing trick thanks to 
&lt;a href=&quot;http://swiftandpainless.com/selector-and-the-responder-chain/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have you seen this before?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NotificationCenter.default.post(name: NSNotification.Name(rawValue: &quot;didSomething&quot;), object: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… yea, its pretty ugly, not to mention incredibly error prone. If you have to use this same
notification in multiple parts of your app, you are very likely to typo that string literal at
some point.&lt;/p&gt;

&lt;p&gt;But, I just discovered some syntax sugar to help clean that up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension NSNotification.Name {
    static let appDidSomething = NSNotification.Name(rawValue: &quot;didSomething&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that in place, you can start adjusting your call-sites like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NotificationCenter.default.post(name: .appDidSomething, object: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How glorious is that?&lt;/p&gt;

&lt;p&gt;In retrospect, it seems a bit obvious, but the best tricks usually are.&lt;/p&gt;</content><author><name></name></author><summary type="html">I may be late to the party, but I just discovered the most amazing trick thanks to this article.</summary></entry><entry><title type="html">Self-Explained Swift</title><link href="http://alloc-init.com/test/blog/2017.01.19" rel="alternate" type="text/html" title="Self-Explained Swift" /><published>2017-01-19T00:00:00-05:00</published><updated>2017-01-19T00:00:00-05:00</updated><id>http://alloc-init.com/test/blog/self-explained-swift-2</id><content type="html" xml:base="http://alloc-init.com/test/blog/2017.01.19">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Self-Explained Swift #2
// Tools to make our code easier to manage and read.

import UIKit
import PlaygroundSupport

// Welcome to my second Self-Explained Swift. In this playground, we are starting with
// the code from the previous post but with some new changes and the old comments removed.
// If you feel like you don't understand something, go back and check it out.

// The idea I want to convey in this post is &quot;Tool Creation&quot;. You can create many tools
// that can be reused throughout your app that will help cut down on coding mundane tasks
// such as view creation and common layout constraints.

// The &quot;Tools&quot; in this instance will be extensions. If you are not familiar with them,
// extensions allow you to bolt new functions on to existing types. Below I have added
// a few functions to assist us in initializing common UI elements, and generating common
// view layouts.

extension UIView { // Layout extension

    // This function will encapsulate the process of adding a view, enabling autolayout,
    // and configuring the common constraints
    func constrainTo(view: UIView) {

        // Turn on autolayout
        view.translatesAutoresizingMaskIntoConstraints = false

        // Because of the way we worded the function, view will be the parent and self,
        // the child. It might look a little strange here, but as you will see below, it
        // reads quite nicely in the call-sites.
        view.addSubview(self)

        // I was notified about the new NSLayoutAnchor system since my last post, this
        // makes alot nicer constraint building, so we use that here.
        view.topAnchor.constraint(equalTo: self.topAnchor).isActive = true
        view.bottomAnchor.constraint(equalTo: self.bottomAnchor).isActive = true
        view.leftAnchor.constraint(equalTo: self.leftAnchor).isActive = true
        view.rightAnchor.constraint(equalTo: self.rightAnchor).isActive = true

    }

}

extension UIStackView {

    // UIStackView has alot of things that are frequently changed from the defaults. This
    // new init overload will allow us to one-line most of it.
    convenience init(arrangedSubviews: [UIView],
                     axis: UILayoutConstraintAxis,
                     distribution: UIStackViewDistribution,
                     alignment: UIStackViewAlignment) {

        // Chain to the original initializer.
        self.init(arrangedSubviews: arrangedSubviews)

        // Set our custom properties here.
        self.axis = axis
        self.distribution = distribution
        self.alignment = alignment

        // Again, it's nice to hide this away, since we will always need it off anyways.
        self.translatesAutoresizingMaskIntoConstraints = false

    }

}

// Here we are going to make class functions to help create a sort of &quot;theme&quot; for
// our app.

// For the most part, this is just our previous button code, refactored into a
// class function. We provide function parameters to set things likely to be
// different per instance.

// We also want to set translatesAutoresizingMaskIntoConstraints, so we can completely
// remove that from our view controller code.

extension UIButton {

    class func standardAwesomeButton(title: String) -&amp;gt; UIButton {

        let button = UIButton()

        button.setTitle(title, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false

        return button
    }

}

extension UILabel {

    class func standardAwesomeLabel(title: String) -&amp;gt; UILabel {

        let label = UILabel()

        label.font = UIFont(name: &quot;Menlo&quot;, size: 14)
        label.textColor = .white
        label.text = title
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false

        return label
    }

}

class OurAwesomeViewController: UIViewController {

    lazy var titleLabel: UILabel = {
        return UILabel.standardAwesomeLabel(title: &quot;Awesome&quot;)
    }()

    lazy var button: UIButton = {

        let button = UIButton.standardAwesomeButton(title: &quot;Press Me&quot;)
        button.addTarget(self,
                         action: #selector(OurAwesomeViewController.buttonTest),
                         for: .touchUpInside)

        return button
    }()

    override func loadView() {

        super.loadView()

        view.backgroundColor = .blue

        // We are using our custom UIStackView Initializer, This will reduce quite
        // a bit of the duplicated code and make your call-sites much easier to read.
        let verticalLayout = UIStackView(arrangedSubviews: [titleLabel, button],
                                         axis: .vertical,
                                         distribution: .fill,
                                         alignment: .fill)

        verticalLayout.isLayoutMarginsRelativeArrangement = true
        verticalLayout.layoutMargins = UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)

        // Call our new layout function, this encapsulates and simplifies the common
        // task of adding views and setting their constraints.
        verticalLayout.constrainTo(view: view)

    }

    func buttonTest(sender: UIButton) {
        view.backgroundColor = .red
    }

}

// Fire up our awesome view controller in a playground.
PlaygroundPage.current.liveView = OurAwesomeViewController()
PlaygroundPage.current.needsIndefiniteExecution = true

// As you can see, this greatly cleans up our layout code and makes it easier to
// manage. The View Controller is now ~43 lines of code and centralizes our styling.
// One forgotten property or function call could have caused your view to not render,
// but with this new setup, that code is now shared among other views and should be
// much easier to diagnose, and less likely to happen in the first place.

// Using these techniques, you can make your view controllers smaller, and simply
// theme creation. You could (if you wanted to) make several extensions for different
// styles of buttons, labels, or any sort of UI element. A change in any one would
// instantly be reflected across your app, with the only downside being the initial
// one-time setup.

// That's it for #2, next time, we will adjust the architecture to move your app-logic
// out of the ViewControllers as well.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;downloads/2-LayoutImproved.zip&quot;&gt;Download This Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the previous post: &lt;a href=&quot;blog/2016.12.28&quot;&gt;Self-Explained Swift #1&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">``` // Self-Explained Swift #2 // Tools to make our code easier to manage and read.</summary></entry><entry><title type="html">I Added Some New “Stuff”</title><link href="http://alloc-init.com/test/blog/2017.01.12" rel="alternate" type="text/html" title="I Added Some New &quot;Stuff&quot;" /><published>2017-01-12T00:00:00-05:00</published><updated>2017-01-12T00:00:00-05:00</updated><id>http://alloc-init.com/test/blog/new-stuff</id><content type="html" xml:base="http://alloc-init.com/test/blog/2017.01.12">&lt;p&gt;I’ve added a new Page. It’s called “Stuff”.&lt;/p&gt;

&lt;p&gt;The idea is that I will put random pieces of code that I have been tinkering with in there for you
to check out if you are interested.&lt;/p&gt;

&lt;p&gt;The quality and usefulness of the “Stuff” will vary, so use them at your own risk.&lt;/p&gt;

&lt;p&gt;Click or Tap &lt;a href=&quot;pages/stuff&quot;&gt;here&lt;/a&gt; to check it out.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve added a new Page. It’s called “Stuff”.</summary></entry><entry><title type="html">New Year, New Website!!!</title><link href="http://alloc-init.com/test/blog/2017.01.10" rel="alternate" type="text/html" title="New Year, New Website!!!" /><published>2017-01-10T00:00:00-05:00</published><updated>2017-01-10T00:00:00-05:00</updated><id>http://alloc-init.com/test/blog/new-year</id><content type="html" xml:base="http://alloc-init.com/test/blog/2017.01.10">&lt;p&gt;Check it out, I finally got around to building a new website.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS&lt;/li&gt;
  &lt;li&gt;PhileCMS&lt;/li&gt;
  &lt;li&gt;Piwik Analytics (data is owned by me and not Wordpress)&lt;/li&gt;
  &lt;li&gt;100% Custom Theme (might still need some work, but it’s good for now)&lt;/li&gt;
  &lt;li&gt;Mobile Responsive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am so excited, and I’m looking forward to writing more this year.&lt;/p&gt;

&lt;p&gt;Stay Tuned!&lt;/p&gt;</content><author><name></name></author><summary type="html">Check it out, I finally got around to building a new website.</summary></entry><entry><title type="html">Self-Explained Swift</title><link href="http://alloc-init.com/test/blog/2016.12.28" rel="alternate" type="text/html" title="Self-Explained Swift" /><published>2016-12-28T00:00:00-05:00</published><updated>2016-12-28T00:00:00-05:00</updated><id>http://alloc-init.com/test/blog/self-explained-swift-1</id><content type="html" xml:base="http://alloc-init.com/test/blog/2016.12.28">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Self-Explained Swift #1
// AutoLayout... Programmatically

import UIKit // Can't do a layout post without UIKit
import PlaygroundSupport // So we can have this class run in a playground

// I will demonstrate a clear concise way to add elements, separate
// layout concerns, and configure your UI... All without Storyboards.

class OurAwesomeViewController: UIViewController {

    // For each of our UI Elements, we are going to make a lazy
    // var property, and an in-line initializer.

    // Because these are lazy, the variables will call their in-line initializer
    // once they are ready to be added to the view hierarchy. Ideally, I would
    // like these to be lazy let so that you wont accidentally change them
    // once they are on-screen, but as of Swift 3 it is not supported.

    // We could just do let, but with a let, it won't let you wire up selectors
    // to self because self is not ready at initialization.
    lazy var titleLabel: UILabel = {

        // Initialize our new label with the default initializer
        let label = UILabel()

        // Always disable this, otherwise you will get layout errors
        // in the debug log. I am not even sure why this defaults to
        // &quot;true&quot; anymore as you will never need it.
        label.translatesAutoresizingMaskIntoConstraints = false

        // We can set fonts
        label.font = UIFont(name: &quot;Menlo&quot;, size: 14)

        // Set some text color (note, we are not going for design awards here)
        label.textColor = .white

        // And of course, we can set the text
        label.text = &quot;Awesome&quot;

        // Center our text
        label.textAlignment = .center

        return label
    }()

    // Buttons are fun
    lazy var button: UIButton = {

        // Initialize
        let button = UIButton()

        // Disable this stupid &quot;feature&quot;
        button.translatesAutoresizingMaskIntoConstraints = false

        // Set a button title
        button.setTitle(&quot;Press Me&quot;, for: .normal)

        // Let's also wire up a button action
        button.addTarget(self,
                         action: #selector(OurAwesomeViewController.buttonTest),
                         for: .touchUpInside)

        return button
    }()

    // This is where you want to build your layout code. This is called by UIKit
    // when your view is being prepared to be put on the screen.
    override func loadView() {

        // Make sure you call super if you plan to use the default view
        // provided by UIKit, if you don't need it, make sure you set
        // self.view to be something
        super.loadView()

        // Customize the view
        view.backgroundColor = .blue

        // StackViews will make your life much easier. The will automatically
        // manage the layout of their owned views and expose some properties
        // to tweak that layout without manually managing potentially dozens
        // of constraints. StackViews can also be nested and given margins, this
        // can allow for quite a bit of flexibiliy AND ease. IMHO, this is much
        // better than manually building all of your constraints.
        let verticalLayout = UIStackView(arrangedSubviews: [titleLabel, button])

        // again, we never need this
        verticalLayout.translatesAutoresizingMaskIntoConstraints = false

        // Make it vertical, and tweak the distribution and alignment
        // feel free to play with these to get a feel for how this works.
        verticalLayout.axis = .vertical
        verticalLayout.alignment = .fill
        verticalLayout.distribution = .fill

        // If you want to have some margins on your StackView, you can enable it like this.
        verticalLayout.isLayoutMarginsRelativeArrangement = true
        verticalLayout.layoutMargins = UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)

        // Lets create some constraints to keep our StackView layout in check.
        // This is essentially boilerplate code and you might want to create
        // a micro library to wrap up these common tasks. I will show mine in
        // another post later.
        let topConstraint = NSLayoutConstraint(item: verticalLayout,
                                               attribute: .top,
                                               relatedBy: .equal,
                                               toItem: view,
                                               attribute: .top,
                                               multiplier: 1,
                                               constant: 0)

        let bottomConstraint = NSLayoutConstraint(item: verticalLayout,
                                                  attribute: .bottom,
                                                  relatedBy: .equal,
                                                  toItem: view,
                                                  attribute: .bottom,
                                                  multiplier: 1,
                                                  constant: 0)

        let leftConstraint = NSLayoutConstraint(item: verticalLayout,
                                                attribute: .left,
                                                relatedBy: .equal,
                                                toItem: view,
                                                attribute: .left,
                                                multiplier: 1,
                                                constant: 0)

        let rightConstraint = NSLayoutConstraint(item: verticalLayout,
                                                 attribute: .right,
                                                 relatedBy: .equal,
                                                 toItem: view,
                                                 attribute: .right,
                                                 multiplier: 1,
                                                 constant: 0)

        // Now add our view...
        view.addSubview(verticalLayout)

        // And our constraints.
        view.addConstraints([topConstraint, bottomConstraint, leftConstraint, rightConstraint])
    }

    // Here is our test function to be called when our button is tapped.
    func buttonTest(sender: UIButton) {
        // Nothing fancy here, we will just change the background color.
        view.backgroundColor = .red
    }

}

// Fire up our awesome view controller in a playground.
PlaygroundPage.current.liveView = OurAwesomeViewController()
PlaygroundPage.current.needsIndefiniteExecution = true

// Layout in-code might look a bit daunting, but it allows you to become more familiar with
// the UI elements, their placement, and their properties. It improves change tracking in git
// and personally, I find this much easier to reason as opposed to the black magic of
// Interface Builder.

// BONUS CONTENT!!!

// You might want to know how to use this in an actual Xcode Project, rather than Playgrounds.

// First, in your project file, you might have a &quot;Main Interface&quot; configured, this is normally
// your first storyboard to load. Just open your project file and clear it out.

// Next

// This should be similar to your default AppDelegate. However, the only lines you need to
// change are in the applicationDidFinishLaunchingWithOptions function.
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?

    func application(_ application: UIApplication,
                     willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {

        // Let's create a new window. Every app needs one to start.
        // We will set its frame to be the same size of the screen.
        window = UIWindow(frame: UIScreen.main.bounds)

        // Set the window's rootViewController to be the
        // ViewController you want to start with.
        window?.rootViewController = OurAwesomeViewController()

        // This will push it on to the screen.
        window?.makeKeyAndVisible()

        // Unless you have some major failure during this function, you should
        // return true here to let your application know it's ready to go.
        return true
    }
}

// And that's it for my first post, let me know via twitter (@WestonHanners) if you like this
// format and want to see more.

// Keep an eye out for my next post where we will write a few extensions to make the code
// above much easier to manage and read.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;downloads/1-Layout.zip&quot;&gt;Download This Playground&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">``` // Self-Explained Swift #1 // AutoLayout… Programmatically</summary></entry><entry><title type="html">Easy, Automatic Server Mocking for iOS Testing</title><link href="http://alloc-init.com/test/blog/2016.06.27" rel="alternate" type="text/html" title="Easy, Automatic Server Mocking for iOS Testing" /><published>2016-06-27T00:00:00-04:00</published><updated>2016-06-27T00:00:00-04:00</updated><id>http://alloc-init.com/test/blog/easy-automatic-mocking</id><content type="html" xml:base="http://alloc-init.com/test/blog/2016.06.27">&lt;blockquote&gt;
  &lt;p&gt;What do you do when you need to run UI tests on an integration server
for an app that requires a VPN to reach its web service?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a question that I needed an answer for earlier this week. My
first thought was to try to stub out the service calls with dummy data
and bundle it with my app, but this was going to need a lot of work to
maintain and I am pretty lazy. After an hour or so of research, I came
upon &lt;a href=&quot;https://mitmproxy.org&quot;&gt;mitmproxy&lt;/a&gt;. Here is the solution…&lt;/p&gt;

&lt;h2 id=&quot;project-configuration&quot;&gt;Project Configuration&lt;/h2&gt;

&lt;p&gt;First set up a new project configuration and call it something like
“Mock” In your app’s target build settings, find the section called
“Other Swift Flags”. Twirl down the arrow and add “-D MOCKING” next to
your mocking configuration. This works similarly to preprocessor macros
in Objective-C, and will allow you to set up code that will only be
compiled when it is defined. Hopefully you are using NSURLSession for
your API calls, find the place where you initialize it and set its
configuration like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#if MOCKING

let proxyDict: [AnyHashable: Any] = [
    &quot;HTTPSEnable&quot;   :1,
    &quot;HTTPSProxy&quot;    :&quot;localhost&quot;,
    &quot;HTTPSPort&quot;     :8080,
    &quot;HTTPEnable&quot;    :1,
    &quot;HTTPProxy&quot;     :&quot;localhost&quot;,
    &quot;HTTPPort&quot;      :8080
]

URLSession.configuration.connectionProxyDictionary = proxyDict

#endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will redirect your http and https requests made with that session
through your local proxy.&lt;/p&gt;

&lt;h2 id=&quot;install-and-configure-mitmproxy&quot;&gt;Install and Configure mitmproxy&lt;/h2&gt;

&lt;p&gt;Now you are ready to install mitmproxy. &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install mitmproxy&lt;/code&gt;. After
installing, run it once from the terminal to make sure everything works.
This will also install a certificate into ~/.mitmproxy.&lt;/p&gt;

&lt;p&gt;Clone &lt;a href=&quot;https://github.com/ADVTOOLS/ADVTrustStore.git&quot;&gt;this repository&lt;/a&gt; somewhere.&lt;/p&gt;

&lt;p&gt;This tool will install the certificate into your simulators. Run this
command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iosCertTrustManager.py -a ~/.mitmproxy/mitmproxy-ca-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will have to enter “y” for any of the simulators you want to use.
Now comes the moment of truth. Run mitmproxy again and start-up your
app. Requests should appear in the window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/Screenshot-2016-06-24-20.25.03.png&quot; alt=&quot;Recording&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SUCCESS!!!&lt;/p&gt;

&lt;h2 id=&quot;start-recording&quot;&gt;Start Recording&lt;/h2&gt;

&lt;p&gt;Finally we can start recording, when you are ready, run this command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mitmdump -w output_file_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can name the output file whatever you want. Once it is running, do
any actions you want to record in the Simulator, and they will be saved
to that file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/Screenshot-2016-06-24-20.26.41.png&quot; alt=&quot;Playback&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Press CTRL+C when you are done. Now when you want to replay the
responses you saved, run this command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mitmdump -S saved_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your server is uses https, you can prevent mitmdump from trying to
check the certificates during replay by adding the option
“–no-upstream-cert”. You will now be able to run your app, even if you
have no internet connection. This works especially well for UI testing
since your requests are not likely to differ between runs. …and that’s
it. I hope you find this useful, and if you have any questions, feel
free to poke me on &lt;a href=&quot;https://twitter.com/@westonhanners&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">What do you do when you need to run UI tests on an integration server for an app that requires a VPN to reach its web service?</summary></entry></feed>